// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -f /tmp/tmp4wn4yreu --schema=derived --docs -b --derive=Default --derive=PartialEq
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube_derive::CustomResource;
    #[cfg(feature = "schemars")]
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use std::collections::BTreeMap;
    #[cfg(feature = "builder")]
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
#[cfg_attr(not(feature = "schemars"), kube(schema = "disabled"))]
#[kube(
    group = "cilium.io",
    version = "v2alpha1",
    kind = "CiliumBGPAdvertisement",
    plural = "ciliumbgpadvertisements"
)]
#[kube(derive = "Default")]
#[kube(derive = "PartialEq")]
pub struct CiliumBGPAdvertisementSpec {
    /// Advertisements is a list of BGP advertisements.
    #[cfg_attr(feature = "builder", builder(default))]
    pub advertisements: Vec<CiliumBGPAdvertisementAdvertisements>,
}

/// Advertisement defines which routes Cilium should advertise to BGP peers. Optionally, additional attributes can be set to the advertised routes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct CiliumBGPAdvertisementAdvertisements {
    /// AdvertisementType defines type of advertisement which has to be advertised.
    #[serde(rename = "advertisementType")]
    pub advertisement_type: CiliumBGPAdvertisementAdvertisementsAdvertisementType,
    /// Attributes defines additional attributes to set to the advertised routes. If not specified, no additional attributes are set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub attributes: Option<CiliumBGPAdvertisementAdvertisementsAttributes>,
    /// Selector is a label selector to select objects of the type specified by AdvertisementType. If not specified, all objects of the type specified by AdvertisementType are selected for advertisement.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub selector: Option<CiliumBGPAdvertisementAdvertisementsSelector>,
}

/// Advertisement defines which routes Cilium should advertise to BGP peers. Optionally, additional attributes can be set to the advertised routes.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub enum CiliumBGPAdvertisementAdvertisementsAdvertisementType {
    #[serde(rename = "PodCIDR")]
    PodCidr,
    #[serde(rename = "CiliumPodIPPool")]
    CiliumPodIpPool,
    #[serde(rename = "CiliumLoadBalancerIP")]
    CiliumLoadBalancerIp,
}

/// Attributes defines additional attributes to set to the advertised routes. If not specified, no additional attributes are set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct CiliumBGPAdvertisementAdvertisementsAttributes {
    /// Community sets the community attribute in the route. If not specified, no community attribute is set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub community: Option<CiliumBGPAdvertisementAdvertisementsAttributesCommunity>,
    /// LocalPreference sets the local preference attribute in the route. If not specified, no local preference attribute is set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localPreference"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub local_preference: Option<i64>,
}

/// Community sets the community attribute in the route. If not specified, no community attribute is set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct CiliumBGPAdvertisementAdvertisementsAttributesCommunity {
    /// Large holds a list of the BGP Large Communities Attribute (RFC 8092) values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub large: Option<Vec<String>>,
    /// Standard holds a list of "standard" 32-bit BGP Communities Attribute (RFC 1997) values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub standard: Option<Vec<String>>,
}

/// Selector is a label selector to select objects of the type specified by AdvertisementType. If not specified, all objects of the type specified by AdvertisementType are selected for advertisement.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct CiliumBGPAdvertisementAdvertisementsSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchExpressions"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub match_expressions:
        Option<Vec<CiliumBGPAdvertisementAdvertisementsSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct CiliumBGPAdvertisementAdvertisementsSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: CiliumBGPAdvertisementAdvertisementsSelectorMatchExpressionsOperator,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub values: Option<Vec<String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub enum CiliumBGPAdvertisementAdvertisementsSelectorMatchExpressionsOperator {
    In,
    NotIn,
    Exists,
    DoesNotExist,
}
