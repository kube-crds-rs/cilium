// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -f /tmp/tmptklo00ph --schema=derived --docs -b --derive=Default --derive=PartialEq
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube_derive::CustomResource;
    #[cfg(feature = "schemars")]
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    #[cfg(feature = "builder")]
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// Spec is the desired configuration of the external Cilium workload.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
#[cfg_attr(not(feature = "schemars"), kube(schema = "disabled"))]
#[kube(
    group = "cilium.io",
    version = "v2",
    kind = "CiliumExternalWorkload",
    plural = "ciliumexternalworkloads"
)]
#[kube(status = "CiliumExternalWorkloadStatus")]
#[kube(derive = "Default")]
#[kube(derive = "PartialEq")]
pub struct CiliumExternalWorkloadSpec {
    /// IPv4AllocCIDR is the range of IPv4 addresses in the CIDR format that the external workload can use to allocate IP addresses for the tunnel device and the health endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv4-alloc-cidr"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub ipv4_alloc_cidr: Option<String>,
    /// IPv6AllocCIDR is the range of IPv6 addresses in the CIDR format that the external workload can use to allocate IP addresses for the tunnel device and the health endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6-alloc-cidr"
    )]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub ipv6_alloc_cidr: Option<String>,
}

/// Status is the most recent status of the external Cilium workload. It is a read-only field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "builder", derive(TypedBuilder))]
#[cfg_attr(feature = "schemars", derive(JsonSchema))]
pub struct CiliumExternalWorkloadStatus {
    /// ID is the numeric identity allocated for the external workload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub id: Option<i64>,
    /// IP is the IP address of the workload. Empty if the workload has not registered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[cfg_attr(feature = "builder", builder(default, setter(strip_option)))]
    pub ip: Option<String>,
}
